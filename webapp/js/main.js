let model = null;
tf.loadLayersModel("http://localhost:5500/saved_model/model.json").then(m => {
    console.log("Model loaded");
    // m.compile();
    model = m;
})
let mean = [56.9679376083,91.1704217215,57.8290005777,101.8136915078,59.8757943385,111.5233968804,62.2296360485,120.947718082,65.9656268053,131.2380127094,72.0057770075,140.0106874639,78.6499133449,145.666955517,87.1883304448,150.689196996,99.8604852686,153.598497978,112.2585210861,149.903812825,120.2047949162,144.7585210861,126.2608318891,138.849220104,131.7824956672,130.2764298094,134.8145580589,119.7631426921,136.440785673,110.401502022,137.8778162912,100.689196996,137.9988445985,89.9387637204,66.9026574235,80.8495089544,71.6210283073,77.4748700173,77.5127094165,76.4451184287,82.9679376083,76.9936452917,87.945407279,78.3316002311,107.6972848065,78.0725014443,112.3656845754,76.6811091854,117.7891392259,76.1363373772,123.7016175621,77.1210283073,128.3509532062,80.1793760832,98.1126516464,89.8278451762,98.3396880416,97.0259965338,98.7253032929,103.7833622184,98.9901790872,109.593876372,92.1805314847,113.9826689775,95.0410167533,114.7744078567,98.91536684,115.5482380127,102.5297515887,114.5904101675,105.303870595,113.7079722704,74.6556903524,89.3573079145,78.4098786828,87.9344309648,83.2588099365,87.8027151935,87.6195840555,89.8206239168,83.6551126516,91.2319468515,78.5265742345,91.3497978047,108.3162911612,89.5554592721,112.7972270364,87.5363951473,117.5727902946,87.3812824957,121.370017331,88.8703061814,117.4832466782,90.8509532062,112.5543038706,90.9295205084,84.7931831311,127.447718082,89.6787983824,124.3960138648,95.8064702484,122.4540727903,99.0150202195,123.0612362796,102.0667244367,122.3919699596,107.9231658001,124.1458694396,112.4471403813,127.1031195841,107.7908723281,131.349220104,103.8105141537,133.7677642981,99.2290583478,134.3763720393,94.495378394,134.0436164067,89.9950895436,131.6975736568,85.7510109763,127.2882726748,94.8778162912,126.0447718082,98.9514731369,125.8783939919,103.0462160601,126.0358174466,111.4147891392,126.9367417678,102.9459849798,128.9402079723,99.0447718082,129.4231658001,94.8604852686,129.1291161179];
let std = [24.774636689,29.2629044506,24.7140128015,32.7560739206,25.2647940517,36.0582589322,25.9686432662,39.2817870231,27.0171699562,42.9092518344,28.6942783024,46.000240513,30.6935792996,48.0435875889,33.6061447666,49.8878336787,37.9363144708,50.8849187893,42.1149962918,49.4517515141,44.7166565857,47.440607533,46.9254896582,45.2732422344,49.0409266215,42.1604746186,50.0889300026,38.3929701262,50.5540229058,35.1517955812,51.0498428756,31.8280310929,51.1592477419,28.4394875739,26.6875722983,25.9626147373,28.2059193218,25.0465500396,30.1508384965,24.7214819012,32.0206165582,24.7930420405,33.6406343949,25.0592787843,40.4367932025,24.8722141558,42.0201838772,24.5423739277,43.8643531412,24.3804552844,45.8786822685,24.5932731473,47.362780581,25.3896816668,37.0424681172,28.344824168,37.4146227282,30.7173227496,37.9489903743,33.0280307472,38.1239338804,34.9831146452,35.0020060819,36.3491277374,36.099204475,36.6417099533,37.4605442441,36.9438010764,38.6461171051,36.5798636479,39.5269044825,36.2327660181,28.8388697942,28.3107447768,30.1137329124,27.779201413,31.7224755546,27.6446683395,33.1235890654,28.2511207809,31.8203098895,28.7409732479,30.1185749057,28.8850657496,40.2077385094,28.0312446981,41.8441499686,27.3941685773,43.5780777573,27.3391874241,44.8635874754,27.8933180983,43.5176628626,28.498214098,41.7722888572,28.4831773706,32.359878443,41.2715781734,34.1999626006,40.1685216125,36.4633761127,39.4668549468,37.5768775582,39.6970947934,38.6097495891,39.4182753598,40.5401269789,40.0050232834,41.996416131,40.9619956956,40.5765090694,42.6460747657,39.2410586845,43.6084254101,37.6828082444,43.8628073173,36.0286707276,43.7302680234,34.3547306882,42.8513221008,32.676271172,41.2048548677,36.0102179009,40.7172410718,37.4449252704,40.6310697065,38.8616121703,40.7155437775,41.6352915823,40.9145914969,38.8885255242,41.8664509818,37.5229491125,42.0747425168,36.0300985224,41.9787479075];

function openCvReady() {

    cv.onRuntimeInitialized = function() {
        let video = document.getElementById("cam_input"); // video is the id of video tag
        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
        .then(function(stream) {
            video.srcObject = stream;
            video.play();
        })
        .catch(function(err) {
            console.log("An error occurred! " + err);
        });
        let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);
        let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);
        let gray = new cv.Mat();
        let cap = new cv.VideoCapture(cam_input);
        let faces = new cv.RectVector();
        let classifier = new cv.CascadeClassifier();
        let utils = new Utils('errorMessage');
        let faceCascadeFile = 'haarcascade_frontalface_default.xml'; // path to xml
        utils.createFileFromUrl(faceCascadeFile, faceCascadeFile, () => {
            classifier.load(faceCascadeFile); // in the callback, load the cascade from file 
        });
        const FPS = 60;
        tf.tidy(() => {

            function processVideo() {
                let begin = Date.now();
                cap.read(src);
                src.copyTo(dst);
                cv.cvtColor(dst, gray, cv.COLOR_RGBA2GRAY, 0);
                try{
                    classifier.detectMultiScale(gray, faces, 1.1, 3, 0);
                    // console.log(faces.size());
                }catch(err){
                    // console.log(err);
                }
                for (let i = 0; i < faces.size(); ++i) {
                    let face = faces.get(i);
                    let point1 = new cv.Point(face.x, face.y);
                    let point2 = new cv.Point(face.x + face.width, face.y + face.height);
                    let img = tf.browser.fromPixels(video, 1);
                    cv.rectangle(dst, point1, point2, [255, 0, 0, 255]);
                    img = tf.slice(img, [face.y, face.x], [face.height, face.width]);
                    // console.log(img.shape);
                    if(model){
                        img = tf.image.resizeBilinear(img, [194, 194]);
                        let outputs = model.predict(tf.expandDims(img)).as1D(); // 68, 2
                        let after_mean = tf.add(outputs, tf.tensor1d(mean));
                        let final = tf.mul(after_mean, tf.tensor1d(std)).as2D(68, 2).asType('int32');
                        // let after_std = tf.mul(outputs, tf.tensor1d(std));
                        // let final = tf.add(after_std, tf.tensor1d(mean)).as2D(68, 2).asType('int32');
                        console.log(final.arraySync())
                    }
                }
                cv.imshow("canvas_output", dst);
                // schedule next one.
                let delay = 1000/FPS - (Date.now() - begin);
                setTimeout(processVideo, delay);
            }
            // schedule first one.
            setTimeout(processVideo, 0);
        })
    };
}